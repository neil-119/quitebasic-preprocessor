PROGRAM_DATA | header
	LET VAR_WORLD_X = 15
	LET VAR_WORLD_Y = 8
	LET VAR_MARIO_X = 15
	LET VAR_MARIO_Y = 8
	LET VAR_MARIO_PREV_X = 15
	LET VAR_MARIO_PREV_Y = 8
	LET VAR_MARIO_WIDTH = 12
	LET VAR_MARIO_HEIGHT = 15
	LET VAR_MARIO_POSE_RIGHT = LOAD_IMG_RAW mario-right-still
	LET VAR_MARIO_POSE_LEFT = LOAD_IMG_RAW mario-left-still
	LET VAR_MARIO_POSE_DOWN_RIGHT = LOAD_IMG_RAW mario-down-right-still
	LET VAR_MARIO_POSE_DOWN_LEFT = LOAD_IMG_RAW mario-down-left-still
	LET VAR_MARIO_POSE_JUMP_LEFT = LOAD_IMG_RAW mario-jump-left
	LET VAR_MARIO_POSE_JUMP_RIGHT = LOAD_IMG_RAW mario-jump-right
	LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_RIGHT
	LET VAR_MARIO_CURR_DIR = "d"
	LET VAR_MARIO_IN_AIR = 0
	LET VAR_FREEZE_HORIZ_MOVEMENT = 0
	LET VAR_JUMP_TIMER = 0
	LET VAR_CURR_SECTION = 0
	ARRAY W
	LET W[0] = LOAD_IMG_RAW levelone_01
	LET W[1] = LOAD_IMG_RAW levelone_02
	LET W[2] = LOAD_IMG_RAW levelone_03
	LET W[3] = LOAD_IMG_RAW levelone_04

PROGRAM_START | let us begin
	CLS
	GOSUB RENDER_TITLE
	GOSUB RENDER_LEVEL_BG
	GOSUB RENDER_MARIO
	GOTO GAME_LOOP
	END

GAME_LOOP | main game loop
	IF VAR_FREEZE_HORIZ_MOVEMENT = 1 THEN GOTO JMP_GAME_LOOP_FREEZE_HORIZ

	GOSUB GET_KEY
	IF VAR_LAST_KEY = "d" THEN GOSUB MOVE_MARIO_RIGHT
	IF VAR_LAST_KEY = "a" THEN GOSUB MOVE_MARIO_LEFT

	JMP_GAME_LOOP_FREEZE_HORIZ | I hate goto
		IF VAR_MARIO_IN_AIR > 0 THEN GOTO JMP_GAME_LOOP

	IF VAR_LAST_KEY = "s" THEN GOSUB MOVE_MARIO_DOWN
	IF VAR_LAST_KEY = "w" THEN GOSUB MOVE_MARIO_JUMP
	GOTO GAME_LOOP

	JMP_GAME_LOOP | I hate goto
		LET VAR_JUMP_TIMER = VAR_JUMP_TIMER + 1
		IF VAR_JUMP_TIMER = 50 THEN GOTO JMP_GAME_LOOP_MOVE_DOWN
		IF VAR_JUMP_TIMER = 100 THEN GOTO JMP_GAME_LOOP_NORMALIZE
		GOTO GAME_LOOP

	JMP_GAME_LOOP_MOVE_UP | I hate goto
		LET VAR_MARIO_Y = VAR_MARIO_Y + VAR_MARIO_HEIGHT
		GOSUB RERENDER_MARIO_POS
		GOTO GAME_LOOP
		
	JMP_GAME_LOOP_MOVE_DOWN | I hate goto
		LET VAR_MARIO_Y = VAR_MARIO_Y - VAR_MARIO_HEIGHT
		IF VAR_FREEZE_HORIZ_MOVEMENT THEN GOSUB MOVE_MARIO_JUMP_VELOCITY
		GOSUB RERENDER_MARIO_POS
		GOTO GAME_LOOP

	JMP_GAME_LOOP_NORMALIZE | I hate goto
		LET VAR_MARIO_Y = 8
		LET VAR_MARIO_IN_AIR = 0
		LET VAR_FREEZE_HORIZ_MOVEMENT = 0
		IF VAR_MARIO_CURR_DIR = "d" THEN LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_RIGHT ELSE LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_LEFT
		GOSUB RERENDER_MARIO_POS
		GOTO GAME_LOOP

MOVE_MARIO_JUMP_VELOCITY | "push" mario in direction of jmp
	IF VAR_MARIO_CURR_DIR = "d" THEN GOTO MOVE_MARIO_JUMP_VELOCITY_RIGHT
	IF VAR_MARIO_CURR_DIR = "a" THEN GOTO MOVE_MARIO_JUMP_VELOCITY_LEFT
	RETURN

MOVE_MARIO_JUMP_VELOCITY_RIGHT | "push" mario in direction of jmp
	IF (VAR_WORLD_X + VAR_MARIO_WIDTH) > 75 * 4 THEN RETURN
	LET VAR_WORLD_X = VAR_WORLD_X + VAR_MARIO_WIDTH
	LET VAR_MARIO_X = VAR_MARIO_X + VAR_MARIO_WIDTH
	IF VAR_MARIO_X < 75 THEN GOTO MOVE_MARIO_JUMP_VELOCITY_RIGHT_RET
	GOSUB SHIFT_CAMERA_RIGHT
	GOSUB RERENDER_MARIO_POS
	MOVE_MARIO_JUMP_VELOCITY_RIGHT_RET | I hate gotos
	RETURN

MOVE_MARIO_JUMP_VELOCITY_LEFT | "push" mario in direction of jmp
	IF (VAR_WORLD_X - VAR_MARIO_WIDTH) <= 3 THEN RETURN
	LET VAR_WORLD_X = VAR_WORLD_X - VAR_MARIO_WIDTH
	LET VAR_MARIO_X = VAR_MARIO_X - VAR_MARIO_WIDTH
	IF VAR_MARIO_X > 3 THEN GOTO MOVE_MARIO_JUMP_VELOCITY_LEFT_RET
	GOSUB SHIFT_CAMERA_LEFT
	GOSUB RERENDER_MARIO_POS
	MOVE_MARIO_JUMP_VELOCITY_LEFT_RET | I hate gotos
	RETURN

MOVE_MARIO_JUMP | jump
	LET VAR_JUMP_TIMER = 0
	LET VAR_MARIO_IN_AIR = 1
	IF VAR_MARIO_CURR_DIR = "d" THEN LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_JUMP_RIGHT ELSE LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_JUMP_LEFT
	LET VAR_MARIO_Y = VAR_MARIO_Y + VAR_MARIO_HEIGHT
	GOSUB RERENDER_MARIO_POS
	RETURN

MOVE_MARIO_DOWN | hide / crouch
	IF VAR_MARIO_CURR_DIR = "d" THEN LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_DOWN_RIGHT ELSE LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_DOWN_LEFT
	GOSUB RERENDER_MARIO_POS
	RETURN

MOVE_MARIO_RIGHT | moves mario right
	IF (VAR_WORLD_X + VAR_MARIO_WIDTH) > 75 * 4 THEN RETURN
	LET VAR_WORLD_X = VAR_WORLD_X + VAR_MARIO_WIDTH
	LET VAR_MARIO_X = VAR_MARIO_X + VAR_MARIO_WIDTH
	IF VAR_MARIO_IN_AIR = 0 THEN LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_RIGHT ELSE LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_JUMP_RIGHT
	IF VAR_MARIO_IN_AIR > 0 THEN LET VAR_FREEZE_HORIZ_MOVEMENT = 1
	LET VAR_MARIO_CURR_DIR = "d"
	IF VAR_MARIO_X >= 75 THEN GOSUB SHIFT_CAMERA_RIGHT
	GOSUB RERENDER_MARIO_POS
	RETURN

MOVE_MARIO_LEFT | moves mario left
	IF (VAR_WORLD_X - VAR_MARIO_WIDTH) <= 3 THEN RETURN
	LET VAR_WORLD_X = VAR_WORLD_X - VAR_MARIO_WIDTH
	LET VAR_MARIO_X = VAR_MARIO_X - VAR_MARIO_WIDTH
	IF VAR_MARIO_IN_AIR = 0 THEN LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_LEFT ELSE LET VAR_MARIO_CURR_POSE = VAR_MARIO_POSE_JUMP_LEFT
	IF VAR_MARIO_IN_AIR > 0 THEN LET VAR_FREEZE_HORIZ_MOVEMENT = 1
	LET VAR_MARIO_CURR_DIR = "a"
	IF VAR_MARIO_X < 0 THEN GOSUB SHIFT_CAMERA_LEFT
	GOSUB RERENDER_MARIO_POS
	RETURN

RERENDER_MARIO_POS | render mario curr and prev pos
	GOSUB RENDER_BG_MARIO_PREV
	GOSUB RENDER_MARIO
	RETURN

SHIFT_CAMERA_RIGHT | shifts world left / i.e. camera moves right
	LET VAR_MARIO_X = 0
	LET VAR_MARIO_PREV_X = 0
	LET VAR_MARIO_PREV_Y = 8
	LET VAR_CURR_SECTION = VAR_CURR_SECTION + 1
	GOSUB RENDER_LEVEL_BG
	RETURN

SHIFT_CAMERA_LEFT | shifts world right / i.e. camera moves left
	LET VAR_MARIO_X = 63
	LET VAR_MARIO_PREV_X = 63
	LET VAR_MARIO_PREV_Y = 8
	LET VAR_CURR_SECTION = VAR_CURR_SECTION - 1
	GOSUB RENDER_LEVEL_BG
	RETURN

RENDER_BG_MARIO_PREV | re-render the BG where Mario was prev
	LET VAR_IMG_STRT_X = VAR_MARIO_PREV_X
	LET VAR_IMG_STRT_Y = VAR_MARIO_PREV_Y
	LET VAR_IMG_WIDTH = VAR_MARIO_WIDTH
	LET VAR_IMG_HEIGHT = VAR_MARIO_HEIGHT
	LET VAR_IMG_OFF_X = 0
	LET VAR_IMG_OFF_Y = 0
	LET VAR_IMG_ORIG_WIDTH = 75
	LET VAR_IMG_ORIG_HEIGHT = 75
	LET VAR_IMG_CLRS = W[VAR_CURR_SECTION]
	GOSUB RENDER_IMAGE_RAW_PART
	LET VAR_MARIO_PREV_X = VAR_MARIO_X
	LET VAR_MARIO_PREV_Y = VAR_MARIO_Y
	RETURN

RENDER_MARIO | render mario
	LET VAR_IMG_STRT_X = 0
	LET VAR_IMG_STRT_Y = 0
	LET VAR_IMG_OFF_X = VAR_MARIO_X
	LET VAR_IMG_OFF_Y = VAR_MARIO_Y
	LET VAR_IMG_WIDTH = VAR_MARIO_WIDTH
	LET VAR_IMG_HEIGHT = VAR_MARIO_HEIGHT
	LET VAR_IMG_ORIG_WIDTH = VAR_MARIO_WIDTH
	LET VAR_IMG_ORIG_HEIGHT = VAR_MARIO_HEIGHT
	LET VAR_IMG_CLRS = VAR_MARIO_CURR_POSE
	GOSUB RENDER_IMG_RAW
	RETURN

RENDER_TITLE | renders the title screen
	LET VAR_IMG_STRT_X = 0
	LET VAR_IMG_STRT_Y = 0
	LET VAR_IMG_OFF_X = 0
	LET VAR_IMG_OFF_Y = 0
	LET VAR_IMG_WIDTH = 75
	LET VAR_IMG_HEIGHT = 75
	LET VAR_IMG_ORIG_WIDTH = 75
	LET VAR_IMG_ORIG_HEIGHT = 75
	LET VAR_IMG_CLRS = LOAD_IMG_RAW title
	GOSUB RENDER_IMG_RAW
	GOSUB WAIT_A_KEY
	RETURN

RENDER_LEVEL_BG | render level background
	LET VAR_IMG_STRT_X = 0
	LET VAR_IMG_STRT_Y = 0
	LET VAR_IMG_OFF_X = 0
	LET VAR_IMG_OFF_Y = 0
	LET VAR_IMG_WIDTH = 75
	LET VAR_IMG_HEIGHT = 75
	LET VAR_IMG_ORIG_WIDTH = 75
	LET VAR_IMG_ORIG_HEIGHT = 75
	LET VAR_IMG_CLRS = W[VAR_CURR_SECTION]
	GOSUB RENDER_IMG_RAW
	GOSUB EMPTY_INPUT_BUFFER
	RETURN

RENDER_IMG_RAW | render img (raw)
	FOR VAR_IMG_IDX_BASE = 0 TO (VAR_IMG_WIDTH * VAR_IMG_HEIGHT) - 1
		LET VAR_IMG_IDX = (VAR_IMG_WIDTH * VAR_IMG_HEIGHT) - 1 - VAR_IMG_IDX_BASE
		LET VAR_IMG_IDX_X = FLOOR(VAR_IMG_IDX / VAR_IMG_WIDTH)
		LET VAR_IMG_IDX_Y = VAR_IMG_IDX % VAR_IMG_WIDTH
		LET VAR_IMG_C = MID(VAR_IMG_CLRS, VAR_IMG_IDX * 6, 6)
		IF VAR_IMG_C <> "00FF00" THEN PLOT VAR_IMG_OFF_X + VAR_IMG_IDX_Y, VAR_IMG_OFF_Y + VAR_IMG_IDX_X, "#" + VAR_IMG_C
	NEXT VAR_IMG_IDX_BASE
	RETURN

RENDER_IMAGE_RAW_PART | render img part at offset
	FOR VAR_IMG_IDX_X = VAR_IMG_STRT_X TO VAR_IMG_STRT_X + VAR_IMG_WIDTH - 1
		FOR VAR_IMG_IDX_Y = VAR_IMG_STRT_Y TO VAR_IMG_STRT_Y + VAR_IMG_HEIGHT - 1
			LET VAR_IMG_IDX = VAR_IMG_IDX_Y * VAR_IMG_ORIG_WIDTH + VAR_IMG_IDX_X
			LET VAR_IMG_C = MID(VAR_IMG_CLRS, VAR_IMG_IDX * 6, 6)
			IF VAR_IMG_C <> "00FF00" THEN PLOT VAR_IMG_OFF_Y + VAR_IMG_IDX_X, VAR_IMG_OFF_X + VAR_IMG_IDX_Y, "#" + VAR_IMG_C
		NEXT VAR_IMG_IDX_Y
	NEXT VAR_IMG_IDX_X
	RETURN

WAIT_A_KEY | waits for A key (blocking)
	GOSUB WAIT_BLOCKING_KEY
	IF VAR_LAST_KEY = "a" THEN RETURN
	GOTO WAIT_A_KEY

WAIT_BLOCKING_KEY | waits for any key (blocking)
	LET VAR_LAST_KEY = GETCHAR()
	IF VAR_LAST_KEY <> "" THEN RETURN
	GOTO WAIT_BLOCKING_KEY

GET_KEY | gets any key (non-blocking)
	LET VAR_LAST_KEY = GETCHAR()
	RETURN

EMPTY_INPUT_BUFFER | empties the input buffer
	IF GETCHAR() <> "" THEN GOTO EMPTY_INPUT_BUFFER
	RETURN